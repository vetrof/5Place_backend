package repository

import (
	"database/sql"
	"fmt"
)

// Вспомогательная функция для создания таблиц
func createTables(db *sql.DB) error {
	place_type := `
	  CREATE TABLE IF NOT EXISTS place_type (
	  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	  name TEXT UNIQUE NOT NULL
	);`

	city := `
   CREATE TABLE IF NOT EXISTS city (
   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   name TEXT UNIQUE NOT NULL,
   geom GEOGRAPHY(POINT,4326)
);`

	place := `
   CREATE TABLE IF NOT EXISTS place (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      city_id INTEGER REFERENCES city(id) ON UPDATE CASCADE ON DELETE SET NULL,
      name TEXT,
      geom GEOGRAPHY(POINT,4326),
      descr TEXT,
	  type_id INTEGER REFERENCES place_type(id) ON UPDATE CASCADE ON DELETE SET NULL
   );`

	photo := `
   CREATE TABLE IF NOT EXISTS photo (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      place_id INTEGER REFERENCES place(id) ON UPDATE CASCADE ON DELETE CASCADE,
      image TEXT,
      description TEXT
   );`

	//user := `
	//CREATE TABLE IF NOT EXISTS app_user (
	//	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	//	uuid TEXT UNIQUE NOT NULL,
	//	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	//);`
	//favorite := `
	//CREATE TABLE IF NOT EXISTS favorite (
	//	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	//	user_id INTEGER NOT NULL REFERENCES app_user(id) ON DELETE CASCADE,
	//	place_id INTEGER NOT NULL REFERENCES place(id) ON DELETE CASCADE,
	//	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	//	UNIQUE(user_id, place_id)
	//);`
	//
	//visited_place := `
	//CREATE TABLE IF NOT EXISTS visited_place (
	//	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	//	user_id INTEGER NOT NULL REFERENCES app_user(id) ON DELETE CASCADE,
	//	place_id INTEGER NOT NULL REFERENCES place(id) ON DELETE CASCADE,
	//	visited_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	//	UNIQUE(user_id, place_id)
	//);`

	tables := []string{place_type, city, place, photo}

	for _, table := range tables {
		if _, err := db.Exec(table); err != nil {
			return fmt.Errorf("error creating table: %v", err)
		}
	}

	return nil
}
