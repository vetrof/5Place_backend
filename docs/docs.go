// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/place/cities/{country_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cities"
                ],
                "summary": "Получить список городов по ID страны",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID страны",
                        "name": "country_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseGeneric-array_models_City-handlers_ResponseMeta"
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/place/city/{city_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "Получить все места в городе",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID города",
                        "name": "city_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseGeneric-array_models_Place-handlers_ResponseMeta"
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/place/countries": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "countries"
                ],
                "summary": "Получить список стран",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseGeneric-array_models_Country-handlers_ResponseMeta"
                        }
                    }
                }
            }
        },
        "/api/v1/place/detail/{place_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "Получить детальную информацию о месте",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID места",
                        "name": "place_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseGeneric-array_models_Place-handlers_ResponseMeta"
                        }
                    },
                    "400": {
                        "description": "Неверный ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/place/near": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "Найти места рядом с координатами",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Широта",
                        "name": "lat",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Долгота",
                        "name": "long",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Максимальное количество (1-100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Радиус поиска в метрах (по умолчанию 5000)",
                        "name": "radius",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseGeneric-array_models_Place-handlers_ResponseMeta"
                        }
                    },
                    "400": {
                        "description": "Invalid lat or long",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/place/random": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "Получить случайные места",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID страны",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "ID города",
                        "name": "city",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseGeneric-array_models_Place-handlers_ResponseMeta"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Авторизует пользователя и возвращает JWT токен",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Возвращает информацию о текущем пользователе",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Получить профиль пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Создает нового пользователя в системе",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/auth.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/auth.User"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "auth.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "auth.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "handlers.Coordinates": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                }
            }
        },
        "handlers.ResponseGeneric-array_models_City-handlers_ResponseMeta": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.City"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/handlers.ResponseMeta"
                }
            }
        },
        "handlers.ResponseGeneric-array_models_Country-handlers_ResponseMeta": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Country"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/handlers.ResponseMeta"
                }
            }
        },
        "handlers.ResponseGeneric-array_models_Place-handlers_ResponseMeta": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Place"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/handlers.ResponseMeta"
                }
            }
        },
        "handlers.ResponseMeta": {
            "type": "object",
            "properties": {
                "center": {
                    "$ref": "#/definitions/handlers.Coordinates"
                },
                "count": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "searchRadius": {
                    "type": "number"
                }
            }
        },
        "models.City": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "example": "Kazakhstan"
                },
                "geom": {
                    "type": "string",
                    "example": "POINT(76.8512 43.2220)"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Almaty"
                },
                "points": {
                    "type": "integer",
                    "example": 150
                }
            }
        },
        "models.Country": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string",
                    "example": "USD"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Kazakhstan"
                }
            }
        },
        "models.Place": {
            "type": "object",
            "properties": {
                "cityName": {
                    "type": "string",
                    "example": "Almaty"
                },
                "currency": {
                    "type": "string"
                },
                "desc": {
                    "type": "string",
                    "example": "Famous hill with panoramic view of Almaty city"
                },
                "distance": {
                    "type": "number",
                    "example": 1245.67
                },
                "geom": {
                    "type": "string",
                    "example": "POINT(76.9572 43.2316)"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Kok-Tobe Hill"
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "photo1.jpg",
                        "photo2.jpg"
                    ]
                },
                "price": {
                    "type": "integer",
                    "example": 42
                },
                "type": {
                    "type": "string",
                    "example": "monument"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Операции авторизации и аутентификации",
            "name": "auth"
        },
        {
            "description": "Операции со странами",
            "name": "countries"
        },
        {
            "description": "Операции с городами",
            "name": "cities"
        },
        {
            "description": "Операции с местами и достопримечательностями",
            "name": "places"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "5Place API",
	Description:      "API для приложения 5Place - поиск и управление местами",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
